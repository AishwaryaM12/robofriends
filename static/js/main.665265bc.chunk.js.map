{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","Cardlist","robots","cardComponent","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onsearchChange","event","setState","target","value","state","fetch","then","response","json","users","filterRobots","this","filter","toLowerCase","includes","length","Style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAcgBA,EAZH,SAACC,GACb,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,eACrB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCKCC,EAVE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GACtC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE/E,OACC,6BACEG,ICAWK,EAPG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAChC,OACC,yBAAKf,UAAU,OACf,2BAAOA,UAAU,mCAAmCgB,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCI3FI,EAPA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAWC,OAAO,kBAAoBC,OAAO,UACnExB,EAAMyB,WC4CKC,G,wDAzCd,aAAc,IAAD,8BACZ,gBAeDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACd,YAAaa,EAAME,OAAOC,SAfzC,EAAKC,MAAO,CACXxB,OAAQ,GACRO,YAAY,IAJD,E,gEAQM,IAAD,OAClBkB,MAAM,8CAA8CC,MAAK,SAAAC,GACxD,OAAOA,EAASC,UACdF,MAAK,SAAAG,GACP,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BASd,IAAD,OACFC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC7C,OAAOA,EAAOH,KAAKoC,cAAcC,SAAS,EAAKV,MAAMjB,YAAY0B,kBAElE,OAAgC,IAA7BF,KAAKP,MAAMxB,OAAOmC,OACb,wBAAI1C,UAAU,KAAK2C,MAAM,mBAAzB,WAIR,yBAAK3C,UAAU,MACf,2CACA,kBAAE,EAAF,CAAYe,aAAcuB,KAAKZ,iBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GAnCHO,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.665265bc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?set=set2`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t<p>{props.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\nexport  default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({robots}) => {\r\n\tconst cardComponent = robots.map((user,i) => {\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} /> \r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div> \r\n\t\t);\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn(\r\n\t\t<div className='pa2'>\r\n\t\t<input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange={searchChange} />\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll' , border:'1px solid black' , height:'800px'}}>\r\n\t\t {props.children}\r\n\t\t</div>\r\n\t\t)\r\n}\r\nexport default Scroll; ","import React from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport {robots} from '../robots';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport Scroll from '../Components/Scroll';\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state ={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield:''\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidMount(){\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response =>{\r\n\t\treturn response.json();\r\n\t}).then(users =>{\r\n\t\tthis.setState({robots: users});\r\n\t})\r\n}\r\n\r\n\tonsearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filterRobots = this.state.robots.filter(robots => {\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\tif(this.state.robots.length === 0){\r\n\t\t\treturn <h3 className='tc' Style='color: #0ccac4;'>Loading</h3>\r\n\t\t}\r\n\t\telse {\r\n\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t<h1>RoboFriends</h1>\r\n\t\t< SearchBox searchChange={this.onsearchChange}/>\r\n\t\t<Scroll>\t\r\n\t\t\t<Cardlist robots={filterRobots}/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);}\r\n\t}\r\n\t\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';  \n\nReactDOM.render(\n\t\t\t\t<App /> \n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}